{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["City","props","cityData","State","Lat","Long","EstimatedPopulation","TotalWages","ZipcodeSearchField","value","zipcode","onChange","zipChange","placeholder","App","state","data","updateZip","bind","evt","zip","target","this","setState","length","fetch","then","response","ok","json","responseJson","cities","map","d","className","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAIA,SAASA,EAAKC,GACZ,OACE,gCACE,6BAAKA,EAAMC,SAASF,OAMlB,+BACE,yCAAYC,EAAMC,SAASC,SAC3B,6CAAgBF,EAAMC,SAASE,IAA/B,IAAqCH,EAAMC,SAASG,KAApD,OACA,0DAA6BJ,EAAMC,SAASI,uBAC5C,+CAAkBL,EAAMC,SAASK,oBAO3C,SAASC,EAAmBP,GAC1B,OACE,8BACE,4CAIE,uBAAOQ,MAAQR,EAAMS,QAASC,SAAUV,EAAMW,UAAWC,YAAY,mB,IA0F9DC,E,kDAlFb,WAAYb,GAAO,IAAD,8BAChB,cAAMA,IAEDc,MAAQ,CACXL,QAAS,GACTM,KAAM,CAAC,8CAIT,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBATD,E,6CAalB,SAAUC,GAAK,IAAD,OAERC,EAAMD,EAAIE,OAAOZ,MACrBa,KAAKC,SAAS,CACZb,QAASU,IAMO,IAAfA,EAAII,OAELC,MAAM,wCAA0CL,GAG7CM,MAAK,SAACC,GACL,OAAGA,EAASC,GAEHD,EAASE,OAGT,MAKVH,MAAK,SAACI,GACL,IAAMC,EAASD,EAAaE,KAAI,SAAAC,GAC9B,OAAO,cAACjC,EAAD,CAAME,SAAU+B,OAIzB,EAAKV,SAAS,CACZP,KAAMe,OAMZT,KAAKC,SAAS,CACZP,KAAM,CAAC,iD,oBAMb,WAEE,OACE,sBAAKkB,UAAU,MAAf,UACE,qBAAKA,UAAU,aAAf,SACE,mDAEF,8BACE,8BACE,gCACE,cAAC1B,EAAD,CACEY,IAAKE,KAAKP,MAAML,QAChBE,UAAaU,KAAKL,YAEjBK,KAAKP,MAAMC,mB,GA1EVmB,aC1BHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.fcaa9451.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\n{/*just handles the display of the information if that information exists*/}\nfunction City(props) {\n  return (\n    <div>\n      <h3>{props.cityData.City}</h3>{/* print the city in which lands in the zipcode*/}\n      {/* an unordered list of the needed things\n          - state\n          - location\n          - population\n          - total wages */}\n        <ul>\n          <li>State: {props.cityData.State}</li>\n          <li>Location: ({props.cityData.Lat},{props.cityData.Long})</li>\n          <li>Population (estimated): {props.cityData.EstimatedPopulation}</li>\n          <li>Total Wages: {props.cityData.TotalWages}</li>\n        </ul>    \n    </div>\n  );\n}\n\n//sets up the ZipSearchField\nfunction ZipcodeSearchField(props) {\n  return (\n    <div>\n      <div>\n        {/* input the zipcode to be searched\n            when the field is changed, then it triggers the screen to change. */}\n        Zip Code:\n        <input value ={props.zipcode} onChange={props.zipChange} placeholder=\"Try 10016\"></input>\n      </div>\n    </div>\n  );\n}\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    //the default state of the state\n    this.state = {\n      zipcode: '', //no zipcode\n      data: [<div>No Result</div>] //no results\n    };\n\n    //if it does get updated, bind that result to the state.\n    this.updateZip = this.updateZip.bind(this);\n  }\n\n  //the code that changes the page and gets the zipcode information\n  updateZip(evt){\n\n    let zip = evt.target.value;\n    this.setState({\n      zipcode: zip\n    })\n    //console.log(this.state.zipcode);\n    \n    //checks that the zipcode length must be 5 digits\n    //if it is, does the work\n    if(zip.length === 5){\n      //get the information from the api\n      fetch('http://ctp-zip-api.herokuapp.com/zip/' + zip)\n\n        //get the response\n        .then((response) => {\n          if(response.ok){ //if the reponse is ok, then it turns the response into a json file\n            //console.log(response.json());\n            return response.json();\n          //else, it returns nothing\n          }else{\n            return [];\n          }\n        })\n        \n        //take the response and map it so that it can be displayed.\n        .then((responseJson) => {\n          const cities = responseJson.map(d => {\n            return <City cityData={d} />\n          })\n\n          //set the state so that the data is the cities\n          this.setState({\n            data: cities\n          })\n        })\n    }\n    //else, the page will display No Result\n    else{\n      this.setState({\n        data: [<div>No Result</div>]\n      })\n    }\n  }\n\n  //after all the work is done, this is final bit that it should do.\n  render() {\n    //console.log(this.state.data);\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <h2>Zip Code Search</h2>\n        </div>\n        <div>\n          <div>\n            <div>\n              <ZipcodeSearchField \n                zip={this.state.zipcode} \n                zipChange = {this.updateZip}\n              />\n                {this.state.data}\n            </div>\n        </div>\n      </div>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}